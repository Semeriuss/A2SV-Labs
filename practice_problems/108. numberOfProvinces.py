from typing import List

class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        N = len(isConnected)

        visited = [False] * N

        def dfs(col):
            for row in range(N):
                if isConnected[row][col] and not visited[row]:
                    visited[row] = True
                    dfs(row)
        
        provinces = 0
        for col in range(N):
            if not visited[col]:
                provinces += 1
                visited[col] = True
                dfs(col)
        
        return provinces
                
                    

            

isConnected = [
                [1,1,1,0,1,1,1,0,0,0],
                [1,1,0,0,0,0,0,1,0,0],
                [1,0,1,0,0,0,0,0,0,0],
                [0,0,0,1,1,0,0,0,1,0],
                [1,0,0,1,1,0,0,0,0,0],
                [1,0,0,0,0,1,0,0,0,0],
                [1,0,0,0,0,0,1,0,1,0],
                [0,1,0,0,0,0,0,1,0,1],
                [0,0,0,1,0,0,1,0,1,1],
                [0,0,0,0,0,0,0,1,1,1]
            ]

isConnected = [
                [1,1,0,0,0,0,0,1,0,0,0,0,0,0,0],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,0,1,1,0,0,0,0,0,0,0,0],
                [0,0,0,0,1,0,0,0,0,1,1,0,0,0,0],
                [0,0,0,1,0,1,0,0,0,0,1,0,0,0,0],
                [0,0,0,1,0,0,1,0,1,0,0,0,0,1,0],
                [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
                [0,0,0,0,0,0,1,1,1,0,0,0,0,1,0],
                [0,0,0,0,1,0,0,0,0,1,0,1,0,0,1],
                [0,0,0,0,1,1,0,0,0,0,1,1,0,0,0],
                [0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
                [0,0,0,0,0,0,1,0,1,0,0,0,0,1,0],
                [0,0,0,0,0,0,0,0,0,1,0,0,0,0,1]
            ]

isConnected = [
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0]
            ]
print(Solution().findCircleNum(isConnected))